#!/usr/bin/bash

###########################################################################################

# NOTE:
# The network "payment-processor" is created by this script.

###########################################################################################

set -Cuo pipefail

declare -ri TRUE=0
declare -ri FALSE=1

declare -r DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
declare -r PROJ_YML="project-compose.yml"
declare -r PAYM_YML="payment-compose.yml"

declare docker_compose="docker"

###########################################################################################

incmd(){ # INcrement CoMmanD
	docker_compose="$docker_compose""$1"
}

does_command_exist(){
	if type "$1" &> /dev/null; then
		return $TRUE
	fi

	return $FALSE
}

###########################################################################################

warn(){
	echo "[dc: WARN]: $1."
}

error(){
	echo "[dc: ERROR]: $1."
	echo ""
	exit 1
}

###########################################################################################

if [[ $# -eq 0 ]]; then
	declare -r LF='\n'

	echo -e \
		'dc [<proj | pay> <up | down> [flags]]'                            $LF\
		'    It automatize and facilitate the manipulation of'             $LF\
		'    the Docker Compose files, present in './docker/'.'            $LF\
		' '                                                                $LF\
		'proj  Run containers present in `project-compose.yml`.'           $LF\
		'pay   Run containers present in `payment-compose.yml`.'           $LF\
		' '                                                                $LF\
		'up    Run a one-off command.'                                     $LF\
		'down  Stop and remove containers, networks, images, and volumes.' $LF\
		' '                                                                $LF\
		'-b    Build the Docker image of this project.'                    $LF\
		'-d    Run container in background and print container ID.'        $LF

	exit 0
fi

###########################################################################################

if [[ $# -eq 1 ]]; then
	error "Execution command not specified: 'up'; 'down';"
fi

declare -r FILE_TAG="$1"
declare -r EXEC_CMD="$2"

###########################################################################################

if does_command_exist "docker-compose"; then
	incmd "-" # v1
else
	incmd " " # v2
fi

if ! does_command_exist "docker"; then
	error "Docker (compose) not found"
fi

incmd "compose"
declare -r DOCKER_COMPOSE_CMD="$docker_compose"

# space as prefix
incmd " --file $DIR/docker/"

###########################################################################################

case "$FILE_TAG" in
	"proj")
		incmd "$PROJ_YML"
		;;
	"pay")
		incmd "$PAYM_YML"
		;;
	*)
		error "Invalid YAML file tag: '$FILE_TAG'"
		;;
esac

case "$EXEC_CMD" in
	"up"|"down")
		incmd " $EXEC_CMD " # space as prefix/suffix (expect +args)
		;;
	*)
		error "Invalid execution command: '$EXEC_CMD'"
		;;
esac

###########################################################################################

is_a_valid_flag(){ # INCREMENT FLAGS HERE!
	case "$1" in # space as suffix
		"-b") incmd "--build "  ;;
		"-d") incmd "--detach " ;;
		*)    error "Invalid flag: '$1'" ;;
	esac
}

is_duplicated_flag(){
	for flag in ${@}; do
		if [[ "$arg" = "$flag" ]]; then
			error "Duplicated flag: '$arg'"
		fi
	done
}

validate_flags(){
	local -a used_flags=()

	for arg in ${@}; do
		is_a_valid_flag "$arg"
		is_duplicated_flag ${used_flags[@]}

		# insert into
		used_flags+=("$arg")
	done
}

if [[ $# -gt 2 ]]; then
	if [[ "$EXEC_CMD" =~ "down" ]]; then
		warn "Some arguments were ignored"
	else
		validate_flags ${@:3}
	fi
fi

###########################################################################################

inspect_net(){
	for net in ${@}; do
		docker network inspect "rb-2025_$net" &> /dev/null

		if [[ $? -eq $TRUE ]]; then
			return $TRUE
		fi
	done

	return $FALSE
}

manage_payment_net(){
	declare cmd="docker network $1 rb-2025_payment-processor"

	if [[ "$1" = "create" ]]; then
		cmd="$cmd --driver bridge"
	fi

	eval "$cmd"
}

up_payment_net(){
	if [[ "$EXEC_CMD" = "up" ]] && ! inspect_net "payment-processor"; then
		manage_payment_net "create"
	fi
}

down_payment_net(){
	# these networks are from specific compose files, so if
	# their respective file was not runned, it is not on
	if [[ "$EXEC_CMD" = "down" ]] && ! inspect_net "payment-processor-db balancer-net"; then
		manage_payment_net "rm"
	fi
}

###########################################################################################

up_payment_net
eval "$docker_compose"
down_payment_net
exit 0

###########################################################################################
