#!/usr/bin/env bash

###########################################################################################

if [[ $# -eq 0 ]]
then
	declare -r LF='\n'
	declare -r TB='  '

	echo -e \
'dc up   [-b] [-d]  : docker compose up [--build] [-d|--detach]'$LF\
'dc down            : docker compose down'$LF\
'dc logs [layer-id] : docker compose logs --follow' $LF

	exit 0
fi

declare -r CMD="$1"

###########################################################################################

set -Cuo pipefail

declare -ri TOTAL_SCRIPT_ARGS=$#
declare -r DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
declare -r COMPOSE_DIR="$DIR/docker/compose-files"
declare -ra COMPOSE_FILES=("payment-processors" "auxiliary-applications")

# this will be used to store the path
# of the required compose-file
declare file_yml=""

set_file_yml()
{
	file_yml="-f $COMPOSE_DIR/$1-${COMPOSE_FILES[$1]}.yml"
}

###########################################################################################

fatal_error()
{
	echo "[dc: ERROR]: $1."
	exit 1
}

warning()
{
	echo "[dc: WARNING]: $1."
}

any_ignored()
{
	if [[ $TOTAL_SCRIPT_ARGS -gt $1 ]]
	then
		warning "Any arguments were ignored"
	fi
}

run(){
	#echo "$docker_compose $file_yml ${@}"
	eval "$docker_compose $file_yml ${@}"
}

###########################################################################################

declare docker_compose="docker"

if type "docker-compose" &> /dev/null
then
	docker_compose="$docker_compose-"
elif type "docker" &> /dev/null
then
	docker_compose="$docker_compose "
else
	fatal_error "Docker Compose not found"
fi

docker_compose="${docker_compose}compose"

###########################################################################################

declare -ra NETWORKS=("payment-processor" "cache-net")
declare -ri MAX_LAYER_LEVEL=${#NETWORKS[@]}-1

check_docker_net()
{
	return "$(
		docker network inspect "rb-2025_$1" &> /dev/null
		echo "$?"
	)"
}

get_layer_level()
{
	for (( level = $MAX_LAYER_LEVEL; level > -1; level-- ))
	do
		if check_docker_net "${NETWORKS[$level]}"
		then
			echo $level
			return
		fi
	done

	echo -1
}

declare -ri CURRENT_LAYER_LEVEL=$(get_layer_level)

###########################################################################################

if [[ "$CMD" = "logs" ]]
then
	if [[ $TOTAL_SCRIPT_ARGS -eq 1 ]]
	then
		fatal_error "Layer level not specified"
	fi

	declare -r STR_LOG_LAYER_LEVEL="$2"
	declare -r POSSIBLE_LAYERS_ON='^[0-1]$'

	if [[ ! "$STR_LOG_LAYER_LEVEL" =~ $POSSIBLE_LAYERS_ON ]]
	then
		fatal_error "Invalid layer level ($STR_LOG_LAYER_LEVEL)"
	fi

	declare -ri LOG_LAYER_LEVEL="$STR_LOG_LAYER_LEVEL"

	if [[ $LOG_LAYER_LEVEL -gt $CURRENT_LAYER_LEVEL ]]
	then
		fatal_error "Unavailable layer level"
	fi

	any_ignored 2
	set_file_yml $LOG_LAYER_LEVEL

	run "logs --follow"
	exit 0
fi

###########################################################################################

if [[ "$CMD" != "up" ]] && [[ "$CMD" != "down" ]]
then
	fatal_error "Invalid sub-command ($CMD)"
fi

###########################################################################################

if [[ "$CMD" = "down" ]]
then
	if [[ $CURRENT_LAYER_LEVEL -eq -1 ]]
	then
		fatal_error "None layer level is available"
	fi

	any_ignored 1
	set_file_yml $CURRENT_LAYER_LEVEL
	run "down"
	exit 0
fi

###########################################################################################

if [[ $CURRENT_LAYER_LEVEL -eq $MAX_LAYER_LEVEL ]]
then
	fatal_error "All layers label are up"
fi

declare -ri TRUE=0
declare -ri FALSE=1

declare -i FLAG_BUILD=$FALSE
declare -i FLAG_DETACH=$FALSE

declare docker_compose_flags=""

inc_flags()
{
	docker_compose_flags="$docker_compose_flags $1"
}

is_duplicated_flag()
{
	if [[ $1 -eq $TRUE ]]
	then
		fatal_error "Flag ($2) already used"
	fi
}

if [[ $TOTAL_SCRIPT_ARGS -gt 1 ]]
then
	for flag in ${@:2}
	do
		case "$flag" in
			"-b")
				is_duplicated_flag $FLAG_BUILD "$flag"
				FLAG_BUILD=$TRUE
				inc_flags "--build"
				;;
			"-d")
				is_duplicated_flag $FLAG_DETACH "$flag"
				FLAG_DETACH=$TRUE
				inc_flags "--detach"
				;;
			*)
				fatal_error "Invalid flag ($flag)"
				;;
		esac
	done
fi

# now $CMD only can be "up"
set_file_yml $(( $CURRENT_LAYER_LEVEL + 1 ))
run "up $docker_compose_flags"
exit 0

###########################################################################################
